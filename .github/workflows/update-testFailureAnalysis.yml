name: Update Test Failure Analysis JSON files

on:
  pull_request:
    branches:
      - main
    types:
      - synchronize
      - opened
      - reopened
      - labeled
      - unlabeled

jobs:
  update-json:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.labels.*.name, 'change-report-database') }}
    steps:
      - name: Check Java version and install Java 21 if not present
        id: setup_java
        run: |
          JAVA_VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | cut -d. -f1)
          if [ "$JAVA_VERSION" != "21" ]; then
            echo "Java 21 not found. Installing Java 21..."
            sudo apt-get update
            sudo apt-get install -y openjdk-21-jdk
            echo "JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64" >> $GITHUB_ENV
            export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
            export PATH=$JAVA_HOME/bin:$PATH
          else
            echo "Java 21 is already installed."
          fi
        shell: bash

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          persist-credentials: true

      - name: Check changed files
        id: files
        run: |
          git fetch origin main
          git diff --name-only origin/main > changed_files.txt
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          cat changed_files.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine which updates are needed
        id: check_changes
        run: |
          changed_files="${{ steps.files.outputs.changed_files }}"
          echo "Files changed since main:"
          echo "$changed_files"
          
          # Initialize outputs
          echo "update_selenium=false" >> $GITHUB_OUTPUT
          echo "update_falcon=false" >> $GITHUB_OUTPUT
          echo "update_accessibility=false" >> $GITHUB_OUTPUT
          
          # Check selenium case
          if echo "$changed_files" | grep -q "src/main/java/factory/SoftAssertionMessages.java" && \
             ! echo "$changed_files" | grep -q "src/main/java/reportingHelper/dataset/testFailureAnalysis.json"; then
            echo "update_selenium=true" >> $GITHUB_OUTPUT
          fi
          
          # Check falcon case
          if echo "$changed_files" | grep -q "src/main/java/factory/SoftAssertionMessagesFalcon.java" && \
             ! echo "$changed_files" | grep -q "src/main/java/reportingHelper/dataset/testFailureAnalysisFalcon.json"; then
            echo "update_falcon=true" >> $GITHUB_OUTPUT
          fi
          
          # Check accessibility case
          if echo "$changed_files" | grep -q "src/main/java/factory/SoftAssertionMessagesAccessibility.java" && \
             ! echo "$changed_files" | grep -q "src/main/java/reportingHelper/dataset/testFailureAnalysisAccessibility.json"; then
            echo "update_accessibility=true" >> $GITHUB_OUTPUT
          fi
          
          echo "Update flags:"
          echo "Selenium: ${{ steps.check_changes.outputs.update_selenium }}"
          echo "Falcon: ${{ steps.check_changes.outputs.update_falcon }}"
          echo "Accessibility: ${{ steps.check_changes.outputs.update_accessibility }}"
        shell: bash

      - name: Run selenium update if needed
        if: steps.check_changes.outputs.update_selenium == 'true'
        run: |
          echo "Updating selenium test failure analysis..."
          mvn compile exec:java -Dexec.mainClass="reportingHelper.AddNewDataToJson"

      - name: Run falcon update if needed
        if: steps.check_changes.outputs.update_falcon == 'true'
        run: |
          echo "Updating falcon test failure analysis..."
          mvn compile exec:java -Dexec.mainClass="reportingHelper.AddNewDataToJson" -DPRODUCT_NAME=falcon

      - name: Run accessibility update if needed
        if: steps.check_changes.outputs.update_accessibility == 'true'
        run: |
          echo "Updating accessibility test failure analysis..."
          mvn compile exec:java -Dexec.mainClass="reportingHelper.AddNewDataToJson" -DPRODUCT_NAME=accessibility

      - name: Commit all changes together
        if: ${{ steps.check_changes.outputs.update_selenium == 'true' || steps.check_changes.outputs.update_falcon == 'true' || steps.check_changes.outputs.update_accessibility == 'true' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add all possible JSON files that might have changed
          git add src/main/java/reportingHelper/dataset/testFailureAnalysis.json || true
          git add src/main/java/reportingHelper/dataset/testFailureAnalysisFalcon.json || true
          git add src/main/java/reportingHelper/dataset/testFailureAnalysisAccessibility.json || true
          
          git commit -m "chore: update test failure analysis JSON files" || echo "No changes to commit"
          git push origin HEAD:${{ github.head_ref }}

      - name: Notify no updates needed
        if: ${{ steps.check_changes.outputs.update_selenium == 'false' && steps.check_changes.outputs.update_falcon == 'false' && steps.check_changes.outputs.update_accessibility == 'false' }}
        run: echo "No updates to test failure analysis JSON files needed."